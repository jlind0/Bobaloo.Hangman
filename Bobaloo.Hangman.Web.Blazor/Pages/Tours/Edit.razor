@page "/tours/{tourId}"
@attribute [Authorize(Policy = "IsAdmin")]
@using Bobaloo.Hangman.Data.Core
@using Bobaloo.Hangman.Data
@using NetTopologySuite.Geometries;
@using Microsoft.AspNetCore.SignalR.Client
@using Bobaloo.Hangman.TTS
@using System.ComponentModel.DataAnnotations;
@using Microsoft.CognitiveServices.Speech
@using Bobaloo.Hangman.Business.Core;
@inject ITourBusiness TourBusiness
@inject IRepository<HangmanUnitOfWork, Tour, Guid> TourRepository
@inject ITourLegRepository<HangmanUnitOfWork> TourLegRepository
@inject NavigationManager NavManager
@inject IJSRuntime JSRun
@inject IHttpContextAccessor Context
@inject IAzureTTS TTS
<PageTitle>Bobaloo's Hangman Tours Adminstration Portal</PageTitle>
@if (tour != null && Voices != null)
{
    <EditForm Model="tour" OnValidSubmit="UpdateTour">
        <input type="hidden" value="@Latitude" id="Latitude" />
        <input type="hidden" value="@Longitude" id="Longitude" />
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="Name">Name</label>
            <InputText id="Name" @bind-Value="tour.Name" />
            <ValidationMessage For="@(() => tour.Name)" />
        </div>
        <div class="form-group">
            <label for="Description">Description</label>
            <InputTextArea id="Description" @bind-Value="tour.Description" style="width:100%;height:200px;" />
            <ValidationMessage For="@(() => tour.Description)" />
        </div>
        <div class="form-group">
            <label for="Price">Price</label>
            <InputNumber id="Price" @bind-Value="tour.Price" />
            <ValidationMessage For="@(() => tour.Price)" />
        </div>

        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
    <a href="/api/audio/tours/@TourId" target="_blank">Listen to Intro Audio</a>
    <div id='searchBoxContainer'>
        <input type='text' id='searchBox' />
        <input type='button' value='Search' onclick='geocode()' />
    </div>
    <div id="myMap" style="width: 100%; height: 400px;"></div>
    <EditForm Model="Request" OnValidSubmit="RequestTTS">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label for="Text">Text</label>
            <InputTextArea id="Text" @bind-Value="Request.Text" style="width:100%;height:200px;" />
            <ValidationMessage For="@(() => Request.Text)" />
        </div>
        <div class="form-group">
            <label for="Model">Model</label>
            <InputSelect id="Model" Value="Request.Model" 
            ValueExpression="@(() => Request.Model)" 
            ValueChanged="@((string val)=> ModelChanged(val))">
                <option value="">Select a Model</option>
                @foreach (var actor in Voices)
                {
                    <option value="@actor.ShortName">@actor.LocalName (@actor.Locale)</option>
                }
            </InputSelect>
            @if (ModelStyles != null)
            {
                <InputSelect id="ModelStyle" @bind-Value="Request.Style">
                    <option value="">Select a Style</option>
                    @foreach (var style in ModelStyles)
                    {
                        <option value="@style">@style</option>
                    }
                </InputSelect>
            }
        </div>
        <button type="submit" disabled="@isRunningTTS" class="btn btn-primary">Request TTS</button>
        @if (isRunningTTS)
        {
            <b>Please wait while your speech is generated.</b>
        }
    </EditForm>
    <h2>Tour Legs</h2>
    <TelerikGrid Pageable="true" Sortable="true" TItem="TourLeg" OnRead="GetTourLegs">
        <GridColumns>
            <GridColumn Title="Name">
                <Template>
                    <a href="/tours/legs/@(((TourLeg)context).TourLegId)">@(((TourLeg)context).Name)</a>
                </Template>
            </GridColumn>
            <GridColumn Field="Sequence"/>
            <GridColumn Title="Audio">
                <Template>
                    <a target="_blank" href="/api/audio/tours/legs/@(((TourLeg)context).TourLegId)">Audio</a>
                </Template>
            </GridColumn>
        </GridColumns>
    </TelerikGrid>
    <TelerikForm Model="NewTourLeg" OnValidSubmit="AddTourLeg">
        <FormValidation>
            <DataAnnotationsValidator/>
        </FormValidation>
        <FormItems>
            <FormItem Field="Name" EditorType="FormEditorType.TextBox" />
            <FormItem Field="Text" EditorType="FormEditorType.TextArea"/>
            <FormItem Field="Sequence">
                <Template>
                    <TelerikNumericTextBox @bind-Value="@NewTourLeg.Sequence" />
                </Template>
                
            </FormItem>
        </FormItems>
        <FormButtons>
            <TelerikButton ButtonType="ButtonType.Submit">Add Tour Leg</TelerikButton>
        </FormButtons>
    </TelerikForm>
}
else
{
    <p><em>Loading...</em></p>
}

@code{
    public class TTSRequest
    {
        [Required(AllowEmptyStrings = false)]
        public string Text { get; set; } = null!;
        [Required(AllowEmptyStrings = false)]
        public string Model{ get; set; } = null!;
        public string? Style{ get; set; }
    }
    bool isRunningTTS = false;
    [Parameter] public string TourId { get; set; } = null!;
    private TourLeg NewTourLeg = new TourLeg();
    public TTSRequest Request = new TTSRequest();
    IEnumerable<VoiceInfo>? Voices;
    Tour? tour;
    double? Latitude;
    double? Longitude;
    bool isInited = false;
    public async Task GetTourLegs(GridReadEventArgs e)
    {
        var data = await TourLegRepository.GetForTour(Guid.Parse(TourId), page: new Pager()
            {
                Page = e.Request.Page,
                Size = 10
            }, orderBy: q => q.OrderBy(c => c.Sequence));
        e.Data = data.Entities;
        e.Total = data.Count ?? throw new InvalidOperationException();
    }
    protected override async Task OnInitializedAsync()
    {
        
        Voices = (await TTS.GetVoices()).OrderBy(v => v.LocalName);
        tour = await TourRepository.GetByID(Guid.Parse(TourId));
        Latitude = tour?.StartingPoint?.X;
        Longitude = tour?.StartingPoint?.Y;
        isInited = true;
    }
    
    string[]? ModelStyles = null;
    public Task ModelChanged(string e)
    {
        Request.Model = e;
        ModelStyles = Voices?.Single(v => v.ShortName == e).StyleList;
        return Task.CompletedTask;
    }
    public async Task RequestTTS()
    {
        isRunningTTS = true;
        await TourBusiness.UpdateIntroAudio(Guid.Parse(TourId), Request.Text, Request.Model, Request.Style);
        isRunningTTS = false;
    }
    public async Task AddTourLeg()
    {
        NewTourLeg.TourId = Guid.Parse(TourId);
        await TourLegRepository.Add(NewTourLeg);
        NavManager.NavigateTo($"/tours/legs/{NewTourLeg.TourLegId}");
    }
    private async Task UpdateTour()
    {
        if(tour != null && Longitude != null && Latitude != null)
            tour.StartingPoint = new Point(Latitude.Value, Longitude.Value)
                {
                    SRID = 4326
                };
        await TourRepository.Update(tour ?? throw new InvalidOperationException());
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            var dotNetReference = DotNetObjectReference.Create(this);
            await JSRun.InvokeVoidAsync("SetDotNetObject", dotNetReference);
            await JSRun.InvokeVoidAsync("loadBingMapsScript");
        }
    }
    [JSInvokable("ConfigureMap")]
    public async Task ConfigureMap()
    {
        while (!isInited)
            await Task.Delay(100);
        await JSRun.InvokeVoidAsync("GetMapForEditTour");
    }
    [JSInvokable("UpdateLatLong")]
    public Task UpdateLatLong(double lat, double lon)
    {
        Latitude = lat;
        Longitude = lon;
        return Task.CompletedTask;
    }
}
