@page "/tours/{tourId}"
@using Bobaloo.Hangman.Data.Core
@using Bobaloo.Hangman.Data
@inject IRepository<HangmanUnitOfWork, Tour, Guid> TourRepository
@inject NavigationManager NavManager
<PageTitle>Bobaloo's Hangman Tours Adminstration Portal</PageTitle>
@if (tour != null)
{
    <EditForm Model="tour" OnValidSubmit="UpdateTour">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="Name">Name</label>
            <InputText id="Name" @bind-Value="tour.Name" />
            <ValidationMessage For="@(() => tour.Name)" />
        </div>
        <div class="form-group">
            <label for="Name">Name</label>
            <InputTextArea id="Name" @bind-Value="tour.Description" />
            <ValidationMessage For="@(() => tour.Description)" />
        </div>
        <div class="form-group">
            <label for="Price">Price</label>
            <InputNumber id="Price" @bind-Value="tour.Price" />
            <ValidationMessage For="@(() => tour.Price)" />
        </div>

        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
}
else
{
    <p><em>Loading...</em></p>
}

@code{
    [Parameter] public string TourId { get; set; } 
    Tour? tour;
    protected override async Task OnInitializedAsync()
    {
        tour = await TourRepository.GetByID(Guid.Parse(TourId));
    }
    private async Task UpdateTour()
    {
        await TourRepository.Update(tour ?? throw new InvalidOperationException());
    }
}
