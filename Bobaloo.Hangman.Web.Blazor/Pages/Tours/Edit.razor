@page "/tours/{tourId}"
@attribute [Authorize]
@using Bobaloo.Hangman.Data.Core
@using Bobaloo.Hangman.Data
@using NetTopologySuite.Geometries;
@using Microsoft.AspNetCore.SignalR.Client
@using Bobaloo.Hangman.TTS
@using System.ComponentModel.DataAnnotations;
@using Microsoft.CognitiveServices.Speech
@using Bobaloo.Hangman.Business.Core;
@inject ITourBusiness TourBusiness
@inject IRepository<HangmanUnitOfWork, Tour, Guid> TourRepository
@inject IRepository<HangmanUnitOfWork, TourLeg, Guid> TourLegRepository
@inject NavigationManager NavManager
@inject IJSRuntime JSRun
@inject IHttpContextAccessor Context
@inject IAzureTTS TTS
<PageTitle>Bobaloo's Hangman Tours Adminstration Portal</PageTitle>
@if (tour != null && Voices != null)
{
    <EditForm Model="tour" OnValidSubmit="UpdateTour">
        <input type="hidden" value="@Latitude" id="Latitude" />
        <input type="hidden" value="@Longitude" id="Longitude" />
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="Name">Name</label>
            <InputText id="Name" @bind-Value="tour.Name" />
            <ValidationMessage For="@(() => tour.Name)" />
        </div>
        <div class="form-group">
            <label for="Description">Description</label>
            <InputTextArea id="Description" @bind-Value="tour.Description" style="width:100%;height:200px;" />
            <ValidationMessage For="@(() => tour.Description)" />
        </div>
        <div class="form-group">
            <label for="Price">Price</label>
            <InputNumber id="Price" @bind-Value="tour.Price" />
            <ValidationMessage For="@(() => tour.Price)" />
        </div>

        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
    <a href="/api/audio/tours/@TourId" target="_blank">Listen to Intro Audio</a>
    <div id="myMap" style="width: 100%; height: 400px;"></div>
    <EditForm Model="Request" OnValidSubmit="RequestTTS">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label for="Text">Text</label>
            <InputTextArea id="Text" @bind-Value="Request.Text" style="width:100%;height:200px;" />
            <ValidationMessage For="@(() => Request.Text)" />
        </div>
        <div class="form-group">
            <label for="Model">Model</label>
             <InputSelect id="Model" Value="Request.Model" 
             ValueExpression="@(() => Request.Model)" 
             ValueChanged="@((string val)=> ModelChanged(val))">
                 <option value="">Select a Model</option>
                @foreach(var actor in Voices)
                {
                    <option value="@actor.ShortName">@actor.LocalName</option>
                }
            </InputSelect>
            @if (ModelStyles != null)
            {
                <InputSelect id="ModelStyle" @bind-Value="Request.Style">
                    <option value="">Select a Style</option>
                    @foreach(var style in ModelStyles)
                    {
                        <option value="@style">@style</option>
                    }
                </InputSelect>
            }
        </div>
        <button type="submit" disabled="@isRunningTTS" class="btn btn-primary">Request TTS</button>
        @if(isRunningTTS)
        {
            <b>Please wait while your speech is generated.</b>
        }
    </EditForm>
    <h2>Tour Legs</h2>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Sequence</th>
                <th>Audio</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tourLeg in tour.TourLegs.OrderBy(t => t.Sequence))
            {
                <tr>
                    <td><a href="/tours/legs/@tourLeg.TourLegId">@tourLeg.Name</a></td>
                    <td>@tourLeg.Sequence</td>
                    <td><a href="/api/audio/tours/legs/@tourLeg.TourLegId" target="_blank">Audio</a></td>
                </tr>
            }
        </tbody>
    </table>
    <EditForm Model="NewTourLeg" OnValidSubmit="AddTourLeg">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label for="NewTourLegName">Name</label>
            <InputText id="NewTourLegName" @bind-Value="NewTourLeg.Name" />
            <ValidationMessage For="@(() => NewTourLeg.Name)" />
        </div>
        <div class="form-group">
            <label for="NewTourLegText">Text</label>
            <InputTextArea id="NewTourLegText" style="width:100%;height:200px;" @bind-Value="NewTourLeg.Text" />
            <ValidationMessage For="@(() => NewTourLeg.Text)" />
        </div>
        <div class="form-group">
            <label for="NewTourLegSequence">Sequence</label>
            <InputNumber id="NewTourLegSequence" @bind-Value="NewTourLeg.Sequence" />
            <ValidationMessage For="@(() => NewTourLeg.Sequence)" />
        </div>
        <button type="submit" class="btn btn-primary">Add Tour Leg</button>
    </EditForm>
}
else
{
    <p><em>Loading...</em></p>
}

@code{
    public class TTSRequest
    {
        [Required(AllowEmptyStrings = false)]
        public string Text { get; set; } = null!;
        [Required(AllowEmptyStrings = false)]
        public string Model{ get; set; } = null!;
        public string? Style{ get; set; }
    }
    bool isRunningTTS = false;
    [Parameter] public string TourId { get; set; } = null!;
    private TourLeg NewTourLeg = new TourLeg();
    public TTSRequest Request = new TTSRequest();
    IEnumerable<VoiceInfo>? Voices;
    Tour? tour;
    double? Latitude;
    double? Longitude;
    bool isInited = false;
    protected override async Task OnInitializedAsync()
    {
        Voices = (await TTS.GetVoices()).OrderBy(v => v.LocalName);
        tour = await TourRepository.GetByID(Guid.Parse(TourId), properites: new []{ new EntityProperty("TourLegs", true)});
        Latitude = tour?.StartingPoint?.X;
        Longitude = tour?.StartingPoint?.Y;

        isInited = true;
    }
    string[]? ModelStyles = null;
    public async Task ModelChanged(string e)
    {
        Request.Model = e;
        ModelStyles = Voices?.Single(v => v.ShortName == e).StyleList;

    }
    public async Task RequestTTS()
    {
        isRunningTTS = true;
        await TourBusiness.UpdateIntroAudio(Guid.Parse(TourId), Request.Text, Request.Model, Request.Style);
        isRunningTTS = false;
    }
    public async Task AddTourLeg()
    {
        NewTourLeg.TourId = Guid.Parse(TourId);
        await TourLegRepository.Add(NewTourLeg);
        NavManager.NavigateTo($"/tours/legs/{NewTourLeg.TourLegId}");
    }
    private async Task UpdateTour()
    {
        if(tour != null && Longitude != null && Latitude != null)
            tour.StartingPoint = new Point(Latitude.Value, Longitude.Value)
                {
                    SRID = 4326
                };
        await TourRepository.Update(tour ?? throw new InvalidOperationException());
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            var dotNetReference = DotNetObjectReference.Create(this);
            await JSRun.InvokeVoidAsync("SetDotNetObject", dotNetReference);
        }
    }
    [JSInvokable("ConfigureMap")]
    public async Task ConfigureMap()
    {
        while (!isInited)
            await Task.Delay(100);
        await JSRun.InvokeVoidAsync("GetMapForEditTour");
    }
    [JSInvokable("UpdateLatLong")]
    public async Task UpdateLatLong(double lat, double lon)
    {
        Latitude = lat;
        Longitude = lon;
    }
}
