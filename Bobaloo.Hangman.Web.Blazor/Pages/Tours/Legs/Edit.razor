@page "/tours/legs/{tourLegId}"
@attribute [Authorize(Policy = "IsAdmin")]
@using Bobaloo.Hangman.Data.Core
@using Bobaloo.Hangman.Data
@using NetTopologySuite.Geometries;
@using Microsoft.AspNetCore.SignalR.Client
@using Bobaloo.Hangman.TTS
@using System.ComponentModel.DataAnnotations;
@using Bobaloo.Hangman.Business.Core;
@using Microsoft.CognitiveServices.Speech;
@inject IRepository<HangmanUnitOfWork, TourLeg, Guid> TourLegRepository
@inject NavigationManager NavManager
@inject IJSRuntime JSRun
@inject IHttpContextAccessor Context
@inject ITourLegBusiness TourLegBusiness
@inject IAzureTTS TTS
<PageTitle>Bobaloo's Hangman Tours Adminstration Portal</PageTitle>
@if (tourLeg != null && Voices != null)
{
    <a href="/tours/@tourLeg.TourId">@tourLeg.Tour.Name</a>
    <EditForm Model="tourLeg" OnValidSubmit="UpdateTourLeg">
        <input type="hidden" value="@Latitude" id="Latitude" />
        <input type="hidden" value="@Longitude" id="Longitude" />
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="Name">Name</label>
            <InputText id="Name" @bind-Value="tourLeg.Name" />
            <ValidationMessage For="@(() => tourLeg.Name)" />
        </div>
        <div class="form-group">
            <label for="Name">Text</label>
            <InputTextArea id="Name" @bind-Value="tourLeg.Text" style="width:100%;height:200px;" />
            <ValidationMessage For="@(() => tourLeg.Text)" />
        </div>

        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
    <a href="/api/audio/tours/legs/@TourLegId" target="_blank">Listen to Audio</a>
    <div id='searchBoxContainer'>
        <input type='text' id='searchBox' />
        <input type='button' value='Search' onclick='geocode()' />
    </div>
    <div id="myMap" style="width: 100%; height: 400px;"></div>
    <EditForm Model="Request" OnValidSubmit="RequestTTS">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label for="Model">Model</label>
            <InputSelect id="Model" Value="Request.Model"
                         ValueExpression="@(() => Request.Model)"
                         ValueChanged="@((string val)=> ModelChanged(val))">
                <option value="">Select a Model</option>
                @foreach (var actor in Voices)
                {
                    <option value="@actor.ShortName">@actor.LocalName (@actor.Locale)</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => Request.Model)" />
            @if (ModelStyles != null)
            {
                <InputSelect id="ModelStyle" @bind-Value="Request.Style">
                    <option value="">Select a Style</option>
                    @foreach (var style in ModelStyles)
                    {
                        <option value="@style">@style</option>
                    }
                </InputSelect>
            }
        </div>

        <button type="submit" disabled="@isRunningTTS" class="btn btn-primary">Request TTS</button>
        @if (isRunningTTS)
        {
            <b>Please wait while your speech is generated.</b>
        }
    </EditForm>
    
}
else
{
    <p><em>Loading...</em></p>
}

@code{
    public class TTSRequest
    {
        [Required(AllowEmptyStrings = false)]
        public string Model { get; set; } = null!;
        public string? Style{ get; set; }
    }
    [Parameter] public string TourLegId { get; set; } = null!;
    public TTSRequest Request = new TTSRequest();
    TourLeg? tourLeg;
    double? Latitude;
    double? Longitude;
    IEnumerable<VoiceInfo>? Voices;
    bool isRunningTTS = false;
    bool isInited = false;
    protected override async Task OnInitializedAsync()
    {
        tourLeg = await TourLegRepository.GetByID(Guid.Parse(TourLegId), properites: new []{ new EntityProperty("Tour")});
        Voices = (await TTS.GetVoices()).OrderBy(t => t.LocalName);
        Latitude = tourLeg?.Waypoint?.X;
        Longitude = tourLeg?.Waypoint?.Y;
        isInited = true;
    }
    string[]? ModelStyles = null;
    public async Task ModelChanged(string e)
    {
        Request.Model = e;
        ModelStyles = Voices?.Single(v => v.ShortName == e).StyleList;

    }
    public async Task RequestTTS()
    {
        isRunningTTS = true;
        await TourLegBusiness.UpdateTourLegAudio(Guid.Parse(TourLegId), Request.Model, Request.Style);
        isRunningTTS = false;
    }
    private async Task UpdateTourLeg()
    {
        if(tourLeg != null && Longitude != null && Latitude != null)
            tourLeg.Waypoint = new Point(Latitude.Value, Longitude.Value)
                {
                    SRID = 4326
                };
        await TourLegRepository.Update(tourLeg ?? throw new InvalidOperationException());
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            var dotNetReference = DotNetObjectReference.Create(this);
            await JSRun.InvokeVoidAsync("SetDotNetObject", dotNetReference);
            await JSRun.InvokeVoidAsync("loadBingMapsScript");
        }
    }
    [JSInvokable("ConfigureMap")]
    public async Task ConfigureMap()
    {
        while (!isInited)
            await Task.Delay(100);
        await JSRun.InvokeVoidAsync("GetMapForEditTour");
    }
    [JSInvokable("UpdateLatLong")]
    public async Task UpdateLatLong(double lat, double lon)
    {
        Latitude = lat;
        Longitude = lon;
    }
}
