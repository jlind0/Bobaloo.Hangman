@page "/tours/add"
@attribute [Authorize(Policy = "IsAdmin")]
@using Bobaloo.Hangman.Data.Core
@using Bobaloo.Hangman.Data
@using NetTopologySuite.Geometries
@inject IRepository<HangmanUnitOfWork, Tour, Guid> TourRepository
@inject NavigationManager NavManager
@inject IJSRuntime JSRun
<PageTitle>Bobaloo's Hangman Tours Adminstration Portal</PageTitle>

<EditForm Model="tour" OnValidSubmit="AddTour">
    <DataAnnotationsValidator />
    <input type="hidden" value="@Latitude" id="Latitude" />
    <input type="hidden" value="@Longitude" id="Longitude" />
    <div class="form-group">
        <label for="Name">Name</label>
        <InputText id="Name" @bind-Value="tour.Name" />
        <ValidationMessage For="@(() => tour.Name)" />
    </div>
    <div class="form-group">
        <label for="Name">Description</label>
        <InputTextArea id="Name" @bind-Value="tour.Description" />
        <ValidationMessage For="@(() => tour.Description)" />
    </div>
    <div class="form-group">
        <label for="Price">Price</label>
        <InputNumber id="Price" @bind-Value="tour.Price" />
        <ValidationMessage For="@(() => tour.Price)" />
    </div>

    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>
<div id='searchBoxContainer'>
    <input type='text' id='searchBox' />
    <input type='button' value='Search' onclick='geocode()' />
</div>
<div id="myMap" style="width: 100%; height: 400px;"></div>

@code{
    Tour tour = new Tour();
    double? Latitude;
    double? Longitude;
    private async Task AddTour()
    {
        if (Latitude != null && Longitude != null)
            tour.StartingPoint = new Point(Latitude.Value, Longitude.Value)
            {
                    SRID = 4326
            };
        await TourRepository.Add(tour);
        NavManager.NavigateTo($"/tours/{tour.TourId}");
        
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            var dotNetReference = DotNetObjectReference.Create(this);
            await JSRun.InvokeVoidAsync("SetDotNetObject", dotNetReference);
        }
    }
    [JSInvokable("ConfigureMap")]
    public async Task ConfigureMap()
    {
        await JSRun.InvokeVoidAsync("GetMapForAddTour");
    }
    [JSInvokable("UpdateLatLong")]
    public async Task UpdateLatLong(double lat, double lon)
    {
        Latitude = lat;
        Longitude = lon;
    }
}